extends ansi_codes

snippet absolute_path "Absolute path with file name"
realpath $0
endsnippet

snippet assoc_array
declare -A ${1:var}=([${2:key}]=${3:value})
endsnippet

snippet case
case $1 in
	$0) ;;
	*)
esac

endsnippet

# snippet color
# "\e[$1m"
# endsnippet

# snippet coloreset
# "\e[0m"
# endsnippet

# https://github.com/dylanaraps/pure-sh-bible#count-files-or-directories-in-directory
snippet count_files "count files or dirs in directory"
count() {
	# Usage: count /path/to/dir/*
	#        count /path/to/dir/*/
	[ -e "$1" ] \
		&& printf '%s\n' "$#" \
		|| printf '%s\n' 0
}
endsnippet

snippet default "use default if var empty or unset"
${${1:var}:-${2:default}}
endsnippet

snippet default_ifempty "use default if var empty"
${${1:var}-${2:default}}
endsnippet

snippet default_assign "set default to var if empty or unset"
${${1:var}:=${2:default}}
endsnippet

snippet default_assign_ifempty "set default to var if empty"
${${1:var}=${2:default}}
endsnippet

snippet default_ifnotempty "use default if var is not empty"
${${1:var}:+${2:default}}
endsnippet

snippet default_ifset "use default if var is set"
${${1:var}+${2:default}}
endsnippet

snippet delete_line_in_file
sed -i "/${1:regex}/c\\" ${2:filename}
endsnippet

snippet file_name "root name of file" i
${${1:filename}%.*}
endsnippet

snippet file_ext "file extension" i
${${1:filename}##*.}
endsnippet

snippet float_calc
bc <<< "scale=2; $1"
endsnippet

snippet function_exists
typeset -f ${1:function_name} > /dev/null$0
endsnippet

snippet is_binary "Is file binary"
file --dereference --mime-encoding ${1:filename} | grep -q binary
endsnippet

snippet last_exit
$?
endsnippet

snippet list_functions "list functions declared in script"
declare -F | cut -d" " -f3
endsnippet


snippet log2file
exec >> ${1:filename}
exec 2>&1

endsnippet

snippet lowercase
${${1:var},,}
endsnippet

snippet lstrip_function
lstrip() {
	# Usage: lstrip "string" "pattern"
	printf '%s\n' "\${1##\$2}"
}
$0
endsnippet

# https://github.com/dylanaraps/pure-sh-bible#parsing-a-keyval-file
snippet parse_key_values
# Setting 'IFS' tells 'read' where to split the string.
while IFS='=' read -r key val; do
	# Skip over lines containing comments.
	# (Lines starting with '#').
	[ "${key##\#*}" ] || continue

	# '$key' stores the key.
	# '$val' stores the value.
	printf '%s: %s\n' "$key" "$val"

	# Alternatively replacing 'printf' with the following
	# populates variables called '$key' with the value of '$val'.
	#
	# NOTE: I would extend this with a check to ensure 'key' is
	#       a valid variable name.
	# export "$key=$val"
	#
	# Example with error handling:
	# export "$key=$val" 2>/dev/null ||
	#     printf 'warning %s is not a valid variable name\n' "$key"
done < "file"
endsnippet

snippet remove_short_start "remove shortest match of pattern from start of string"
\${${1:var}#${2:pattern}}
endsnippet

snippet remove_long_start "remove longest match of pattern from start of string"
\${${1:var}##${2:pattern}}
endsnippet

snippet remove_short_end "remove shortest match of pattern from end of string"
\${${1:var}%${2:pattern}}
endsnippet

snippet remove_long_end "remove longest match of pattern from end of string"
\${${1:var}%%${2:pattern}}
endsnippet

snippet rstrip_function
rstrip() {
	# Usage: rstrip "string" "pattern"
	printf '%s\n' "\${1%%\$2}"
}
$0
endsnippet

snippet split_function "split string delimiter"
split() {
	# Disable globbing. This ensures that the word-splitting is safe.
	set -f

	# Store the current value of 'IFS' so we can restore it later.
	old_ifs=$IFS

	# Change the field separator to what we're splitting on.
	IFS=$2

	# Create an argument list splitting at each
	# occurance of '$2'.
	#
	# This is safe to disable as it just warns against
	# word-splitting which is the behavior we expect.
	# shellcheck disable=2086
	set -- $1

	# Print each list value on its own line.
	printf '%s\n' "$@"

	# Restore the value of 'IFS'.
	IFS=$old_ifs

	# Re-enable globbing.
	set +f
}
$0
endsnippet

# https://github.com/dylanaraps/pure-sh-bible#trim-quotes-from-a-string
snippet trim_quotes_function "trim_quotes string"
trim_quotes() {
	set -f				# Disable globbing.
    old_ifs=$IFS
    IFS=\"\'			# Set 'IFS' to ["'].
    # shellcheck disable=2086
    set -- $1			# Create an argument list, splitting the string at ["'].
	IFS=				# Set 'IFS' to blank to remove spaces left by the removal of ["'].
    printf '%s\n' "$*"	# Print the quote-less string.
    IFS=$old_ifs
    set +f				# Re-enable globbing.
}
endsnippet

snippet trim_whitespaces_function "trim_whitespaces string"
trim_whitespaces() {
	# Remove all leading white-space.
	# '${1%%[![:space:]]*}': Strip everything but leading white-space.
	# '${1#${XXX}}': Remove the white-space from the start of the string.
	trim=${1#${1%%[![:space:]]*}}

	# Remove all trailing white-space.
	# '${trim##*[![:space:]]}': Strip everything but trailing white-space.
	# '${trim%${XXX}}': Remove the white-space from the end of the string.
	trim=${trim%${trim##*[![:space:]]}}

	printf '%s\n' "$trim"
}
$0
endsnippet

snippet trim_all_whitespaces_function
# shellcheck disable=SC2086,SC2048
trim_all_whitespaces() {
	set -f				# Disable globbing to make the word-splitting below safe.

	# Set the argument list to the word-splitted string.
	# This removes all leading/trailing white-space and reduces
	# all instances of multiple spaces to a single ("  " -> " ").
	set -- $*

	printf '%s\n' "$*"	# Print the argument list as a string.
	set +f				# Re-enable globbing.
}
$0
endsnippet

snippet uppercase
${${1:var}^^}
endsnippet

snippet capitalize
${${1:var}^}
endsnippet

snippet kill_eol
tr -d "\n" < ${1:filename}
endsnippet

snippet varlength "length of var in characters"
\${#${1:var}}
endsnippet


snippet line_count
wc -l < ${1:filename}
endsnippet

snippet nth_line
tail -n+${1:line_no} ${2:filename} | head -1
endsnippet

snippet overwrite_line
echo -en "$1\r"
endsnippet

snippet pipe_echo "pipe text to command instead of `echo text | command`"
${1:command} <<< ${2:text}
endsnippet

snippet pipe_file "pipe file to cmd instead of `cat file | command`"
${1:command} < ${2:file}
endsnippet

snippet read_first_line
read line < ${1:filename}
endsnippet

snippet remove_last_char
${${1:var}%?}
endsnippet

snippet remove_last_file_line "Remove last line from file"
sed -i '$ d' ${1:filename}
endsnippet

snippet script_name "Filename of current script" i
${0##*/}
endsnippet

snippet script_dir "Dir name of current script" i
$(dirname "$0")
endsnippet

snippet sed_multi
sed -e "$1" -e "$2"
endsnippet

snippet sed_use_pattern
sed "s/${1:pattern}/&/"
endsnippet

snippet sort_in_place
sort -o ${1:filename} ${2:filename}
endsnippet

snippet substr
${${1:var}:${2:start}:${3:length}}
endsnippet

snippet substr? "check if string contains substring"
case $1 in
	*sub_string1*)
	;;
	*sub_string2*)
	;;
	*)
	;;
esac
$0
endsnippet

snippet wait_for_last_bg_process
wait $!
endsnippet

snippet remove_first_line
| tail -n + 2
endsnippet

snippet remove_last_line
| head -n -1
endsnippet

snippet runfunc
usage() {
	printf "Usage: ${0##*/} [%s]\n" "$(declare -F | cut -d" " -f3 | tr "\n" "|")"
}

[[ $# -eq 0 || ! $(typeset -f "\$1") ]] && { usage; exit 1; }
\$1
$0
endsnippet

