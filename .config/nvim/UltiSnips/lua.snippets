extends lua-nvim

snippet starts_with
function string.starts(string,start)
	return string.sub(string,1,string.len(start))==start
end
endsnippet

snippet pr
print($1)
endsnippet

snippet capitalize
local function capitalize(s)
	return s:sub(1,1):upper()..s:sub(2)
end
$0
endsnippet

snippet deep_copy "deep copy of table"
function table.deep_copy(original)
	local copy = {}
	for k, v in pairs(original) do
		if type(v) == "table" then
	    	v = table.deep_copy(v)
	  	end
		copy[k] = v
	end
	return copy
end
endsnippet

snippet deepcopy
function deepcopy(orig)
	local orig_type = type(orig)
	copy
	if orig_type == 'table' then
		copy = {}
		for orig_key, orig_value in next, orig, nil do
			copy[deepcopy(orig_key)] = deepcopy(orig_value)
		end
		setmetatable(copy, deepcopy(getmetatable(orig)))
	else -- number, string, boolean, etc
		copy = orig
	end
	return copy
end
endsnippet

snippet shallow_copy "shallow copy of a table"
function table.shallow_copy(original)
	local copy = {}
	for key, value in pairs(original) do
		copy[key] = value
	end
	return copy
end
endsnippet

snippet module
local M = {}

$0

return M
endsnippet

snippet str2lines
lines = {}
for s in str:gmatch("[^\r\n]+") do
	table.insert(lines, s)
end
endsnippet

snippet randomize "initialize random generator"
math.randomseed(os.time())
endsnippet

snippet random_table_element
${1:table}[math.random(#$1)]
endsnippet

snippet round
math.floor($1 + 0.5)$0
endsnippet

snippet unload_module
package.loaded["${1:module}"] = nil
$0
endsnippet
