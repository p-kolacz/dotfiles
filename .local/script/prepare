#!/bin/bash

# ╔══════════════════════════════════════════════════════════════════════════╗
# ║                                Machines                                  ║
# ╚══════════════════════════════════════════════════════════════════════════╝

archbook() {
	laptop
	nvidia
	bspwm
}

hadron() {
	desktop
	openbox
	wifi
	bluetooth
}

workbook() {
	laptop
	bspwm
}

zima() {
	server
}

# ╔══════════════════════════════════════════════════════════════════════════╗
# ║                                 Groups                                   ║
# ╚══════════════════════════════════════════════════════════════════════════╝

laptop() {
	desktop
	bluetooth
	wifi
	install xorg-xinput tlp batsignal # xinput 4 touchpad
	startenableuser batsignal
	ynstall xplugd
	sudo ln -s "$XDG_CONFIG_HOME/etc/udev/rules.d/backlight.rules" /etc/udev/rules.d/
	sudo ln -s "$XDG_CONFIG_HOME/etc/X11/xorg.conf.d/40-touchpad.conf" /etc/X11/xorg.conf.d/
}

desktop() {
	_yay
	syncthing
	fonts
	pipewire
	terminal
	apps
}

server() {
	dotfiles
	_yay
}

# ╔══════════════════════════════════════════════════════════════════════════╗
# ║                                 Targets                                  ║
# ╚══════════════════════════════════════════════════════════════════════════╝

apps() {
	install kitty rclone udisks2
	# install arc-gtk-theme gtk-engines gtk-engine-murrine
	install gimp gnome-font-viewer qalculate-gtk gnumeric # GTK apps
	install flameshot keepassxc # Ot Apps
	install mpv zathura-pdf-poppler
	ynstall brave-bin
}

bluetooth() {
	install bluez bluez-utils blueman
	startenable bluetooth.service
	# sudo ln -s "$XDG_CONFIG_HOME/etc/udev/rules.d/bluetooth-wakeup.rules" /etc/udev/rules.d/
}

bspwm() {
	xorg
	notifications
	install bspwm arandr sxhkd picom polybar dunst rofi rofi-calc xdotool i3lock pcmanfm
	sudo ln -s "$XDG_CONFIG_HOME/etc/systemd/system/lock@.service" /etc/systemd/system/
}

cron() {
	mkdir -p "$HOME"/.local/spool/anacron "$HOME"/.config/anacron/{daily,monthly,weekly}
	install cronie
	startenable cronie.service
	echo "crontab -e"
	echo '@hourly /usr/bin/anacron -s -t $HOME/.config/anacron/anacrontab -S $HOME/.local/spool/anacron'
}

docker() {
	install docker docker-compose
	ynstall lazydocker-bin
	startenable docker.service
	sudo groupadd docker
	sudo usermod --append --groups docker "$USER"
	echo "Relogin for adding to group to take effect" 
}

dotfiles() {
	mkdir -p "$HOME"/.local/{bin,config,share,state} "$HOME"/.local/state/log
	export GIT_DIR="$HOME/.config/dotfiles"
	export GIT_WORK_TREE="$HOME"
	[[ -e $GIT_DIR ]] && { echo "$GIT_DIR already exists"; return 1; }

	cd && git clone --bare https://github.com/p-kolacz/dotfiles.git "$GIT_DIR" && git checkout
}

fonts() {
	# CJK = Chinese-Japanese-Korean
	install noto-fonts-emoji noto-fonts-cjk ttf-ubuntu-font-family ttf-ubuntu-nerd
}

go() {
	install go gopls
}

music() {
	ynstall deadbeef deadbeef-mpris2-plugin deadbeef-plugin-musical-spectrum-gtk2-git
}

nodejs() {
	install npm typescript-language-server
}

notifications() {
	install libnotify dunst
}


nvidia() {
	install nvidia-dkms nvidia-prime
}

nvim() {
	install neovim python python-pip python-pynvim lua-language-server
	# ynstall figlet-fonts 
}

openbox() {
	xorg
	notifications
	install openbox obconf lxappearance-obconf lxinput lxrandr picom tint2 pcmanfm xdotool
	ynstall obmenu openbox-themes
}

php() {
	install php phpactor
}

pipewire() {
	install pipewire wireplumber pipewire-alsa pipewire-pulse pavucontrol playerctl
	startenableuser pipewire
	startenableuser pipewire-pulse
}

photo() {
	install darktable
}

printer() {
	install cups system-config-printer
	startenable cups.service
}

printer-dcpt500w() {
	printer
	install lib32-glibc		# this is needed for drivers to work, see https://aur.archlinux.org/packages/brother-dcpt500w
	ynstall brother-dcpt500w
}

python() {
	install python python-pip pyright
}

redox() {
	install avr-libc avrdude
}

rails() {
	ruby
	gem install rails --conservative
}
ruby() {
	ynstall asdf-vm
	asdf plugin add ruby
	asdf install ruby latest
	asdf global ruby latest
	gem install solargraph --conservative
	install yaml-language-server
}

rust() {
	install rustup rust-analyzer
	rustup default stable
}

scanner() {
	install simple-scan sane-airscan
}

syncthing() {
	install syncthing
	startenableuser syncthing.service
}

terminal() {
	install fd git lsof man-db man-pages btop p7zip polkit ripgrep rsync starship
	install catdoc hexyl python-pygments mediainfo odt2txt
	install fzf smartmontools trash-cli
	nvim
	vifm
}

vifm() {
	install vifm fuse-zip curlftpfs sshfs meld
	ynstall archivemount dragon-drop fuse3-p7zip-git
}

vm() {
	install qemu-desktop virt-manager dnsmasq
	startenable libvirtd.service
	sudo usermod --append --groups libvirt "$USER"
}

wacom() {
	install xf86-input-wacom
}

wifi() {
	install wireless-regdb
	sudo nvim /etc/conf.d/wireless-regdom
}

xorg() {
	install xorg-server xorg-xinit xorg-xev xorg-xprop xclip xcolor xwallpaper numlockx
	sudo ln -s "$XDG_CONFIG_HOME/etc/X11/xorg.conf.d/00-keyboard-pl.conf" /etc/X11/xorg.conf.d/
	# sudo ln -s "$XDG_CONFIG_HOME/etc/X11/xorg.conf.d/10-monitor.conf" /etc/X11/xorg.conf.d/
	sudo ln -s "$XDG_CONFIG_HOME/etc/X11/xorg.conf.d/50-pointer-accel.conf" /etc/X11/xorg.conf.d/
}

_yay() {
	pacman -Qs yay > /dev/null && return 1
	git clone https://aur.archlinux.org/yay.git /tmp/yay && cd /tmp/yay && makepkg -si
	yay --cleanmenu=false --diffmenu=false --removemake --save
}

yazi() {
	install yazi fd ffmpegthumbnailer fzf jq ripgrep unarchiver
}

# devops() {
	# install xsv rsync filezilla whois npm vscode-html-languageserver vscode-css-languageserver typescript-language-server
	# ynstall sql-language-server
# }

# asdf() {
	# TODO: ynstall asdf and restart terminal
	# asdf plugin add shellcheck
	# asdf install shellcheck latest
	# asdf global schellcheck latest
# }

# ╔══════════════════════════════════════════════════════════════════════════╗
# ║                                  Utilz                                   ║
# ╚══════════════════════════════════════════════════════════════════════════╝

install() {
	sudo pacman -S --needed --noconfirm "$@" 
}
ynstall() {
	yay -S --needed "$@" 
}
copy() {
	sudo cp -v --no-clobber "$1" "$2"
}
startenable() {
	sudo systemctl enable "$1"
	sudo systemctl start "$1"
}
startenableuser() {
	systemctl --user enable "$1"
	systemctl --user start "$1"
}
usage() {
	local funcs
	funcs=$(declare -F | cut -d" " -f3 | grep -Ev "copy|install|ynstall|startenable|usage")
	SCRIPT=${0##*/}
	cat << EOF
$SCRIPT: Install/configure packages

SYNOPSIS:
	$SCRIPT TARGET

TARGETS:
$funcs

EOF
}

# ╔══════════════════════════════════════════════════════════════════════════╗
# ║                                   Run                                    ║
# ╚══════════════════════════════════════════════════════════════════════════╝


case $# in
	0) usage; exit 2 ;;
	1) ;;
	*) echo "Too many targets $#"; exit 3 ;;
esac

[[ ! $(typeset -f "$1") ]] && { echo "Invalid target: $1"; exit 4; }
$1

